# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, CPqD
# This file is distributed under the same license as the dojot package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: dojot 0.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-08 15:13-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../source/user_guide.rst:2
msgid "User Guide"
msgstr ""

#: ../../source/user_guide.rst:4
msgid ""
"This document provides information on how to use dojot. On that regard, "
"this should describe the steps required to install and operate the "
"platform from a device developer or application developer point of view. "
"For documentation regarding the operation of the platform itself, please "
"refer to the :doc:`ops_guide`."
msgstr ""

#: ../../source/user_guide.rst:14
msgid "Who should read this"
msgstr ""

#: ../../source/user_guide.rst:16
msgid "Users that want a deeper look at how dojot works;"
msgstr ""

#: ../../source/user_guide.rst:17
msgid "Application developers."
msgstr ""

#: ../../source/user_guide.rst:21
msgid "Getting Started"
msgstr ""

#: ../../source/user_guide.rst:23
msgid ""
"To start, please follow dojot's installation guide in "
":doc:`install/compose_guide`. There you should find how to properly "
"download a working copy of the components, how to minimally configure "
"them, how to start them up and how to check whether they are working."
msgstr ""

#: ../../source/user_guide.rst:29
msgid "dojot basics"
msgstr ""

#: ../../source/user_guide.rst:31
msgid ""
"Before using dojot, you should be familiar with some basic operations and"
" concepts. They are very simple to understand and use, but without them, "
"all operations might become obscure and senseless. It is advisable to "
"checkout our :doc:`architecture` to get acquainted with all internal "
"components."
msgstr ""

#: ../../source/user_guide.rst:36
msgid ""
"First of all, you should check out how to acccess dojot through its APIs,"
" which is detailed in the next section. After that, there's an "
"explanation of a few basic entities in dojot: devices, templates and "
"flows (including a simple tutorial on how to create and use them)."
msgstr ""

#: ../../source/user_guide.rst:41
msgid ""
"All these instructions considers only API access. For a guided tour on "
"how to use the web interface, check dojot's `YouTube channel`_."
msgstr ""

#: ../../source/user_guide.rst:45
msgid "User authentication"
msgstr ""

#: ../../source/user_guide.rst:47
msgid ""
"All HTTP requests supported by dojot are sent to the API gateway. In "
"order to control which user should access which endpoints and resources, "
"dojot makes uses of `JSON Web Token`_ (a useful tool is `jwt.io`_) which "
"encodes things like (not limited to these):"
msgstr ""

#: ../../source/user_guide.rst:52
msgid "User identity"
msgstr ""

#: ../../source/user_guide.rst:53
msgid "Validation data"
msgstr ""

#: ../../source/user_guide.rst:54
msgid "Timestamp"
msgstr ""

#: ../../source/user_guide.rst:56
msgid ""
"The component responsible for user authentication is `auth`_. You can "
"find a tutorial of how to authenticate a user and how to get an access "
"token in `auth documentation`_."
msgstr ""

#: ../../source/user_guide.rst:62
msgid "Devices and templates"
msgstr ""

#: ../../source/user_guide.rst:64
msgid ""
"In dojot, a device is a digital representation of an actual device or "
"gateway with one or more sensors or of a virtual one with "
"sensors/attributes inferred from other devices. Throughout the "
"documentation, this kind of device will be called simply as 'device'. If "
"the actual device must be referenced, we'll be calling it as 'physical "
"device'."
msgstr ""

#: ../../source/user_guide.rst:70
msgid ""
"Consider, for instance, a physical device with temperature and humidity "
"sensors; it can be represented in dojot as a device with two attributes "
"(one for each sensor). We call this kind of device as regular device or "
"by its communication protocol, for instance, MQTT device or CoAP device."
msgstr ""

#: ../../source/user_guide.rst:75
msgid ""
"We can also create devices which donâ€™t directly correspond to their "
"physical counterparts, for instance, we can create one with higher level "
"of information of temperature (is becoming hotter or is becoming colder) "
"whose values are inferred from temperature sensors of other devices. This"
" kind of device is called virtual device."
msgstr ""

#: ../../source/user_guide.rst:81
msgid ""
"All devices are created based on a *template*, which can be thought as a "
"model of a device. As \"model\" we could think of part numbers or product"
" models - one *prototype* from which devices are created. Templates in "
"dojot have one label (any alphanumeric sequence), a list of attributes "
"which will hold all the device emitted information, and optionally a few "
"special attributes which will indicate how the device communicates, "
"including transmission methods (protocol, ports, etc.) and message "
"formats."
msgstr ""

#: ../../source/user_guide.rst:89
msgid ""
"In fact, templates can represent not only \"device models\", but it can "
"also abstract a \"class of devices\". For instance, we could have one "
"template to represent all thermometers that will be used in dojot. This "
"template would have only one attribute called, let's say, "
"\"temperature\". While creating the device, the user would select its "
"\"physical template\", let's say *TexasInstr882*, and the 'thermometer' "
"template. The user would have also to add translation instructions in "
"order to map the temperature reading that will be sent from the device to"
" a \"temperature\" attribute."
msgstr ""

#: ../../source/user_guide.rst:98
msgid ""
"In order to create a device, a user selects which templates are going to "
"compose this new device. All their attributes are merged together and "
"associated to it - they are tightly linked to the original template so "
"that any template update will reflect all associated devices."
msgstr ""

#: ../../source/user_guide.rst:103
msgid ""
"The component responsible for managing devices (both real and virtual) "
"and templates is `DeviceManager`_. `DeviceManager documentation`_ "
"explains in more depth all the available operations."
msgstr ""

#: ../../source/user_guide.rst:109
msgid "Flows"
msgstr ""

#: ../../source/user_guide.rst:111
msgid ""
"This section will explain what a flow is and how to use it. It will be "
"filled as soon as `mashup`_ documentation is ready."
msgstr ""

#: ../../source/user_guide.rst:115
msgid "Step-by-step device management"
msgstr ""

#: ../../source/user_guide.rst:117
msgid ""
"This section provides a complete step-by-step tutorial of how to create, "
"update, send messages to and check historical data of a device. We will "
"create a simple device with only one attribute, send a few messages "
"emulating the physical device and check the historical data for the only "
"attribute this device has."
msgstr ""

#: ../../source/user_guide.rst:123
msgid ""
"Also, this tutorial assumes that you are using `docker-compose`_, which "
"has all the necessary components to properly run dojot (so all API "
"requests will be sent to localhost:8000)."
msgstr ""

#: ../../source/user_guide.rst:128
msgid "Getting access token"
msgstr ""

#: ../../source/user_guide.rst:130
msgid ""
"As said in `User authentication`_, all requests must contain a valid "
"access token. You can generate a new token by sending the following "
"request:"
msgstr ""

#: ../../source/user_guide.rst:141
msgid ""
"If you want to generate a token for other user, just change the username "
"and password in the request payload. The token (\"eyJ0eXAiOiJKV1QiL...\")"
" should be used in every HTTP request sent to dojot in a special header. "
"Such request would look like:"
msgstr ""

#: ../../source/user_guide.rst:151
msgid ""
"Remember that the token must be set in the request header as a whole, not"
" parts of it. In the example only the first characters are shown for the "
"sake of simplicity. All further requests will use a bash variable called "
"``bash ${JWT}``, which contains the token got from auth component."
msgstr ""

#: ../../source/user_guide.rst:158
msgid "Device creation"
msgstr ""

#: ../../source/user_guide.rst:160
msgid ""
"In order to properly configure a physical device in dojot, you must first"
" create its representation in the platform. The example presented here is"
" just a small part of what is offered by DeviceManager. For more "
"information, check the `DeviceManager how-to`_ for more detailed "
"instructions."
msgstr ""

#: ../../source/user_guide.rst:165
msgid ""
"First of all, let's create a template for the device - all devices are "
"based off of a template, remember."
msgstr ""

#: ../../source/user_guide.rst:184
msgid "This request should give back this message:"
msgstr ""

#: ../../source/user_guide.rst:220
msgid "Note that the template ID is 1 (line 27)."
msgstr ""

#: ../../source/user_guide.rst:222
msgid "To create a template based on it, send the following request to dojot:"
msgstr ""

#: ../../source/user_guide.rst:238
msgid ""
"The template ID list on line 6 contains the only template ID configured "
"so far. To check out the configured device, just send a GET request to "
"/device:"
msgstr ""

#: ../../source/user_guide.rst:246
msgid "Which should give back:"
msgstr ""

#: ../../source/user_guide.rst:283
msgid "Sending messages"
msgstr ""

#: ../../source/user_guide.rst:285
msgid ""
"So far we got an access token and created a template and a device based "
"on it. In an actual deployment, the physical device would send messages "
"to dojot with all its attributes and their current values. For this "
"tutorial we will send MQTT messages by hand to the platform, emulating "
"such physical device. For that, we will use mosquitto_pub from Mosquitto "
"project."
msgstr ""

#: ../../source/user_guide.rst:292
msgid ""
"Some Linux distributions, Ubuntu in particular, have two packages for "
"`mosquitto`_ - one containing tools to access it (i.e. mosquitto_pub and "
"mosquitto_sub for publishing messages and subscribing to topics) and "
"another one containing the MQTT broker. In this tutorial, only the tools "
"are going to be used. Please check if MQTT broker is not running before "
"starting dojot (by running commands like ``ps aux | grep mosquitto``)."
msgstr ""

#: ../../source/user_guide.rst:300
msgid ""
"The dojot compatible format for messages sent by devices is a simple key-"
"value JSON, such as:"
msgstr ""

#: ../../source/user_guide.rst:309
msgid "Let's send this message to dojot:"
msgstr ""

#: ../../source/user_guide.rst:315
msgid ""
"If there is no output, the message was sent to MQTT broker. The topic is "
"build from the following information:"
msgstr ""

#: ../../source/user_guide.rst:318
msgid ""
"admin: user tenant. This is retrieved from \"service\" attribute from "
"user configuration."
msgstr ""

#: ../../source/user_guide.rst:320
msgid ""
"0998: device ID. This is retrieved from the device itself. It is returned"
" when the device is created or read from /device endpoint."
msgstr ""

#: ../../source/user_guide.rst:323
msgid ""
"To check if it was correctly processed by dojot, send the following "
"request:"
msgstr ""

#: ../../source/user_guide.rst:333
msgid "This would result in the following message:"
msgstr ""

#: ../../source/user_guide.rst:347
msgid ""
"The device type is a string formed by \"template\\_\" concatenated with "
"all template IDs that form it."
msgstr ""

#: ../../source/user_guide.rst:350
msgid ""
"For more information on how dojot deals with data sent from devices, "
"check the `Integrating physical devices`_ section."
msgstr ""

#: ../../source/user_guide.rst:354
msgid "Checking historical data"
msgstr ""

#: ../../source/user_guide.rst:356
msgid ""
"In order to check all values that were sent from a device for a "
"particular attribute, you could use the `history APIs`_. Let's first send"
" a few other values to dojot so we can get a few more interesting "
"results:"
msgstr ""

#: ../../source/user_guide.rst:368
msgid "To retrieve all values sent for temperature attribute of this device:"
msgstr ""

#: ../../source/user_guide.rst:377
msgid "The history endpoint is built from these values:"
msgstr ""

#: ../../source/user_guide.rst:379
msgid ""
"``.../type/template_1/id/0998/...``: the device type is ``template_1`` - "
"this is retrieved from the ``type`` attribute from the device. Same for "
"the ID (``0998``)"
msgstr ""

#: ../../source/user_guide.rst:382
msgid ""
"``.../attributes/temperature?lastN=3``: the requested attribute is "
"temperature and it should get the last 3 values. More operators are "
"available in `STH data retrieval`_"
msgstr ""

#: ../../source/user_guide.rst:386
msgid "The request should result in the following message:"
msgstr ""

#: ../../source/user_guide.rst:428
msgid ""
"This message contains all previously sent values. More information about "
"what can be done with historical data can be found in `STH "
"documentation`_."
msgstr ""

#: ../../source/user_guide.rst:433
msgid "Integrating physical devices"
msgstr ""

#: ../../source/user_guide.rst:435
msgid ""
"This section should detail how to integrate a new device with the system."
" That should encompass the both the communication requirements imposed on"
" the device in order to allow its usage with the platform, as well as the"
" steps (if any, depending on the protocol used) to configure this new "
"device within the platform."
msgstr ""

#: ../../source/user_guide.rst:441
msgid ""
"This could also explain (if indeed implemented) the device management "
"functionalities made available by the platform to the device developer."
msgstr ""

#: ../../source/user_guide.rst:444
msgid ""
"Regarding the requirements imposed on the devices, it is forseen that, "
"for each communication scheme (protocol/serialization format) offically "
"supported by the platform, a step by step guide on how to \"develop\" a "
"device is supplied. Such guide can, if applicable, make use of a "
"platform-provided library or SDK."
msgstr ""

#: ../../source/user_guide.rst:451
msgid "Flow Management"
msgstr ""

#: ../../source/user_guide.rst:453
msgid ""
"Moving to the perspective of an aplication developer, this section should"
" list and explain the usage of the information flow configuration process"
" within the platform - how to use the provided gui, high level "
"description of the APIs that can be used to configure such flows, "
"available actions to be used when building the flows, so on and so forth."
msgstr ""

#~ msgid ""
#~ "This document provides information on "
#~ "how to use dojot from a user "
#~ "perspective. On that regard, this should"
#~ " describe the steps required to "
#~ "install and operate the platform from"
#~ " a device developer or application "
#~ "developer point of view. For "
#~ "documentation regarding the operation of "
#~ "the platform itself, please refer to "
#~ "the [operations guide]()"
#~ msgstr ""

#~ msgid ""
#~ "The idea here is to present the"
#~ " reader with a sample end-to-"
#~ "end usage of the platform, showcasing"
#~ " a relevant set of the features "
#~ "implemented by the platform, thus "
#~ "serving as an example of how to"
#~ " use the platform on a \"real "
#~ "world\" scenario."
#~ msgstr ""

#~ msgid ""
#~ "To make things easier for the "
#~ "user, there may be a VM image "
#~ "with a pre-configured deployment of "
#~ "the platform. Should this be the "
#~ "case, instructions on how to deploy "
#~ "the solution might reside only on "
#~ "the Operations Guide."
#~ msgstr ""

#~ msgid "Device Management"
#~ msgstr ""

